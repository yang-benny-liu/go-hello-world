- name: Install Golang
  dnf:
    name:
      - golang
    state: latest
  become: true
  
- name: Install selinux python bindings
  yum:
    name:
      - libselinux-python
    state: latest
  become: true

- name: Create Go src directory
  file:
    path: "{{ ansible_env.HOME }}/go/src"
    state: directory
    mode: '0755'

- name: Clone Git Repo "{{ repo_url }}"
  git:
    repo: "{{ repo_url }}"
    dest: "{{ ansible_env.HOME }}/go/src/{{ repo_name }}"
    version: "{{ repo_branch }}"
    msg: "{{ repo_branch }}"

- name: Download Dep (Golang package manager)
  get_url:
    url: https://raw.githubusercontent.com/golang/dep/v0.5.1/install.sh
    dest: "{{ ansible_env.HOME }}"
    mode: 0755

- name: Install Dep (Golang package manager
  shell: "{{ ansible_env.HOME }}/install.sh"
  environment:
    GOPATH: "{{ ansible_env.HOME }}/go"
    GOBIN: "{{ ansible_env.HOME }}"
  register: install_dep

- name: Install Golang Dependencies
  shell: "{{ ansible_env.HOME }}/dep ensure"
  environment:
    GOPATH: "{{ ansible_env.HOME }}/go"
    GOBIN: "{{ ansible_env.HOME }}"
  args:
    chdir: "{{ ansible_env.HOME }}/go/src/{{ repo_name }}" 
  when: install_dep.rc == 0
  register: install_go_dependencies

- name: Build Go Application
  shell: "go install {{ app_path }}/{{ app_name }}"
  environment:
    GOPATH: "{{ ansible_env.HOME }}/go"
    GOBIN: "{{ ansible_env.HOME }}"
  when: install_go_dependencies.rc == 0
  register: go_build

- name: Start Go Webservice
  shell: "{{ ansible_env.HOME }}/{{ app_name }}"
  async: 60
  poll: 0
  when: go_build.rc == 0

- name: Test {{ app_name }} Webservice
  uri:
    url: http://localhost:8000/status

- name: Get {{ app_name }} Webservice PID
  shell: pgrep {{ app_name }}
  register: hello_pid

- name: Kill {{ app_name }} Webservice
  shell: kill -9 {{ item }}
  when: hello_pid.rc == 0
  with_items: "{{ hello_pid.stdout_lines }}"
